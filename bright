#!/bin/bash
## 
## CONTRIBUTORS: 
## 
##     * Gabriel Gonzalez (gabeg@bu.edu) 
## 
## 
## LICENSE: 
## 
##     The MIT License (MIT)
## 
## 
## NAME:
##   
##     bright - Control and display screen brightness.
## 
## 
## SYNTAX:
##   
##     bright [-h] [-d] [--off] [[--inc] [--dec] <value>] [<value>]
## 
## 
## PURPOSE:
## 
##     Change the brightness of the monitor, or turn it off entirely.
## 
## 
## OPTIONS:
##   
##     -h
##         Print program usage.
## 
##     -d, --display
##         Display a GUI noification, using "noti", that shows the brightness level.
## 
##     --off
##         Turn off the monitor.
## 
##     --inc <value>
##         Increment the brightness by the given percentage value, from 1 - 100.
## 
##     --dec <value>
##         Decrement the brightness by the given percentage value, from 1 - 100.
## 
##     <value>
##         Set the brightness to the given percentage value, from 1 - 100.
## 
## 
## FUNCTIONS:
##   
##     print_usage    - Prints program usage.
## 
##     get_percent    - Calculate the current brightness as a percent.
## 
##     print_bright   - Print brightness level.
## 
##     gui_display    - Display brightness information using the GUI.
## 
##     set_brightness - Set the brightness.
## 
## 
## FILE STRUCTURE:
##   
##     * Print Program Usage
##     * Get Brightness Percent
##     * Print Brightness Level
##     * GUI Brightness Notification
##     * Set Screen Brightness
##     * Control Computer Screen 
##   
##   
## MODIFICATION HISTORY:
##   
##     gabeg Mar 02 2014 <> Created.
## 
##     gabeg Apr 26 2014 <> Changed input parameters.
## 
##     gabeg Jul 01 2014 <> Added functions to increase readability.
##
##     gabeg Dec 03 2014 <> Removed functions that weren't needed anymore, such as:
##                          "step_change_brightness", "default_brightness", and 
##                          "conv_per_to_val".
##
##     gabeg Jan 01 2015 <> Remove "is_int". Made reused variables global. If user 
##                          inputs a percentage value outside of the limit range 
##                          (1-100), set the input value to either 1 
##                          (if less than 1) or 100 (if greater than 100).
##
##     gabeg Jan 07 2015 <> Added the GUI notification display.
##
## **********************************************************************************



## ================
## GLOBAL VARIABLES
## ================

## Program information
ARGV=("$@")
PROG_NAME=`basename $0`

## Brightness Values
DIR="/sys/class/backlight/intel_backlight"
CURR_BRIGHT_FILE="${DIR}/brightness"
MAX_BRIGHT_FILE="${DIR}/max_brightness"
MAX=`head -1 "${MAX_BRIGHT_FILE}"`

## Gui notification bubble
NOTIFY="noti"
NOTIFY_PATH=`hash "${NOTIFY}" 2>&1`



## ###############################
## ##### PRINT PROGRAM USAGE #####
## ###############################

## Display script usage
function print_usage {
    echo "Usage: bright [-h] [--off] [[--inc] [--dec] <value>] [<value>]"
    exit 1
}



## ##################################
## ##### GET BRIGHTNESS PERCENT ##### 
## ##################################

## Calculate the current percent brightness value
function get_percent {
    local curr=`head -1 "${CURR_BRIGHT_FILE}"`  
    local precise=`echo "scale=2; ${curr} / ${MAX} * 100" | bc`
    local rounded=`echo "${precise} / 1" | bc`
    
    echo "${rounded}"
}



## ##################################
## ##### PRINT BRIGHTNESS LEVEL #####
## ##################################

## Print brightness level
function print_bright {
    echo "Brightness: $(get_percent)%"
}



## #######################################
## ##### GUI BRIGHTNESS NOTIFICATION #####
## #######################################

## GUI notification for battery information
function gui_display {
    
    ## Check if notification program exists
    if [ ! -z "${NOTIFY_PATH}" ]; then 
        echo "${PROG_NAME}: '${NOTIFY}' does not exist."
        exit 1
    fi
    
    ## Display current battery level
    ${NOTIFY} --time 5 -b "$(print_bright)" 
}



## #################################
## ##### SET SCREEN BRIGHTNESS #####
## #################################

## Set the brightness
function set_brightness {
    
    ## Check if step value is a valid integer
    if [ "$1" -eq "$1" ] 2>/dev/null; then
        :
    else
        print_usage
    fi
    
    ## Check if input value is outside of limit range
    local input=$1
    if [ ${input} -lt 0 ]; then
        input=0
    elif [ ${input} -gt 100 ]; then
        input=100
    fi
    
    ## Convert input to brightness value
    local curr=`head -1 "${CURR_BRIGHT_FILE}"`
    local rounded=$[ (${input} * ${MAX} / 100) + 1 ]
    # local curr=`head -1 "${CURR_BRIGHT_FILE}"`
    # local precise=`echo "scale=2; ${input} * ${MAX} / 100" | bc`
    # local num=`echo "${precise}" | cut -f1 -d'.'`
    # local rounded=$[ ${num} + 1 ]
    
    ## Calculate brightness change
    local value 
    
    if [[ "$2" == '--inc' ]]; then 
        value=$[ ${curr} + ${rounded} ]
    elif [[ "$2" == '--dec' ]]; then 
        value=$[ ${curr} - ${rounded} ]
    else
        value=${rounded}
    fi
    
    ## Check if output value is outside of limit range
    if [ ${value} -lt 0 ]; then
        value=0
    elif [ ${value} -gt ${MAX} ]; then
        value=$MAX
    fi
    
    ## Set brightness
    echo "${value}" > "${CURR_BRIGHT_FILE}"
    print_bright
}



## ###################################
## ##### CONTROL COMPUTER SCREEN #####
## ###################################

## Choose what action to execute to the screen
function main {
    
    ## Input Parameters
    case "${ARGV[0]}" in
        
        ## Print the help screen
        "-h")
            print_usage
            ;;
        
        ## Print Current Screen Brightness
        "")
            print_bright
            ;;
        
        "-d"|"--display")
            gui_display
            ;;
        
        ## Turn Off Monitor 
        "--off")
            xset dpms force off
            ;;
        
        ## Increment/Decrement Screen Brightness
        "--inc"|"--dec")
            set_brightness "${ARGV[1]}" "${ARGV[0]}"
            ;;
        
        ## Set brightness to given value
        *)
            set_brightness "${ARGV[0]}"
            ;;
    esac
    
    exit 0
}



## Execute screen brightness options
main 
