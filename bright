#!/bin/bash
# ------------------------------------------------------------------------------
# 
# Name: bright
# Author: Gabe Gonzalez
# 
# Brief: Control and display the screen brightness.
# 
# ------------------------------------------------------------------------------

##
# Program name.
##
PROJECT="${0##*/}"

##
# Files/directories.
##
BACKLIGHT_DIR="/sys/class/backlight/intel_backlight"
BRIGHTNESS_FILE="${BACKLIGHT_DIR}/brightness"
BRIGHTNESS_MAX_FILE="${BACKLIGHT_DIR}/max_brightness"

##
# Options.
##
DECREMENT=
DELTA=5
INCREMENT=
INIT=
NOTIFY=
OFF=
SET=
SHORT=

##
# Exit statuses.
##
EXIT_BRIGHT_CHECK_FAIL=10
EXIT_BRIGHT_INVALID_VALUE=11

##
# Main.
##
main()
{
    if [ $# -eq 0 ]
    then
        bright_print
        return $?
    fi

	# Options
    local short="hdD:iNos:S"
    local long="help,decrement,delta:,increment,init,notify,off,set:,short"
	local args=

    # Parse options
    args=$(getopt -o "${short}" --long "${long}" --name "${PROJECT}" \
				-- "${@}")
    if [ $? -ne 0 ]
    then
        usage
        exit 1
    fi
    eval set -- "${args}"

    while true
    do
        case "${1}" in
            -h|--help)
                usage
                exit 0
                ;;
            -d|--decrement)
                DECREMENT=true
                ;;
            -D|--delta)
                shift
                DELTA="${1}"
                ;;
            -i|--increment)
                INCREMENT=true
                ;;
            --init)
                INIT=true
                ;;
			-N|--notify)
				NOTIFY=true
				;;
            -o|--off)
                OFF=true
                ;;
            -s|--set)
                shift
                SET="${1}"
                ;;
            -S|--short)
                SHORT=true
                ;;
            *)
                break
                ;;
        esac
        shift
    done

    # Run options
	if [ -n "${DECREMENT}" ]
	then
		bright_decrement
	elif [ -n "${INCREMENT}" ]
	then
		bright_increment
	elif [ -n "${INIT}" ]
	then
		bright_init
	elif [ -n "${OFF}" ]
	then
		bright_off
	elif [ -n "${SET}" ]
	then
		bright_set "${SET}"
		bright_print
	else
		bright_print
	fi

    return $?
}

##
# Print program usage.
##
usage()
{
    echo "Usage: ${PROJECT} [options] [args]"
    echo
    echo "Options:"
    echo "    -h, --help"
    echo "        Print program usage."
    echo
    echo "    -d, --decrement"
    echo "        Decrement screen brightness level."
    echo
    echo "    -D, --delta=<delta>"
    echo "        The value to add or subtract to the current screen brightness"
    echo "        when incrementing or decrementing."
    echo
    echo "    -i, --increment"
    echo "        Increment screen brightness level."
    echo
    echo "    --init"
    echo "        Initialize the brightness script."
    echo
    echo "    -o, --off"
    echo "        Turn off screen."
    echo
    echo "    -s, --set <value>"
    echo "        Set screen brightness level. Allowed values: [0 - 100]."
    echo
    echo "    -S, --short"
    echo "        Shorten the printed output."
    echo
    echo "Arguments:"
    echo "    <delta>"
    echo "        An integer from [0 - N]. Where N is the current screen"
    echo "        brightness subtracted from the max screen brightness. In"
    echo "        other words, any value that, when added to the current"
    echo "        screen brightness, does not exceed the max."
    echo
    echo "    <value>"
    echo "        An integer value from [0 - 100]."
}

##
# Run checks before printing/modifying brightness level.
##
bright_check()
{
	if [ -d "${BACKLIGHT_DIR}" ]
	then
		return 0
	else
		return 1
	fi
}

##
# Print brightness level.
##
bright_print()
{
	local value=
    local message=
	local ret=

	if ! bright_check
	then
		message="N/A"
		ret=${EXIT_BRIGHT_CHECK_FAIL}
	else
		value=$(echo "$(bright_get_percent) / 1" | bc)
		message="${value}%"
		ret=0
	fi

    if [ -n "${SHORT}" ]
    then
        echo "${message}"
    else
        echo "Brightness: ${message}"
    fi

	if [ -n "${NOTIFY}" ]
	then
		local icon=$(bright_get_notification_icon "${value}")
		notify-send -t 2000 "Brightness" "${message}" --icon="${icon}" &
	fi

	return ${ret}
}

##
# Decrement the screen brightness.
##
bright_decrement()
{
    bright_delta "-" "${DELTA}"
}

##
# Increment the screen brightness.
##
bright_increment()
{
    bright_delta "+" "${DELTA}"
}

##
# Step brightness level by incrementing/decrementing.
##
bright_delta()
{
	if ! bright_check
	then
		bright_print
		return $?
	fi

    local operator="${1}"
    local delta="${2}"
    local percent=$(bright_get_percent)

	if [ ${percent} -eq 1 ]
	then
		delta=$[ ${delta} - 1 ]
	fi

    local value=$(echo "scale=0; ${percent} ${operator} ${delta}" | bc)

	if [ "${value}" -eq 0 ]
	then
		value=1
	fi

    bright_set "${value}"
    bright_print
}

##
# Initialize brightness script.
##
bright_init()
{
	if ! bright_check
	then
        echo "Unable to set brightness: Backlight directory does not exist." 1>&2
        exit ${EXIT_BRIGHT_CHECK_FAIL}
    fi

    echo ":: Initializing brightness settings."
    chmod 666 "${BRIGHTNESS_FILE}"
}

##
# Turn the screen off.
##
bright_off()
{
    xset dpms force off
}

##
# Set the brightness level.
##
bright_set()
{
	if ! bright_check
	then
        echo "Unable to set brightness: Backlight directory does not exist." 1>&2
        exit ${EXIT_BRIGHT_CHECK_FAIL}
    fi

    local value="${1}"
    local max=$(bright_get_max)
    local check=$(echo "(0 <= ${value}) && (${value} <= 100)" | bc)

    if [ ${check} -eq 0 ]
    then
        echo "Unable to set brightness: Value must be between 0 to 100." 1>&2
        exit ${EXIT_BRIGHT_INVALID_VALUE}
    fi

    local newvalue=$(echo "scale=4; ${value} * ${max} / 100" | bc)
    bright_value_round "${newvalue}"> "${BRIGHTNESS_FILE}"
}

##
# Round the input value to the nearest integer.
##
bright_value_round()
{
    local value="${1}"
    local decimal="${value##*.}"
    local locheck=$(echo "${decimal:0:2} < 50" | bc)
    if [ ${locheck} -eq 1 ]
    then
        echo "${value} / 1" | bc
    else
        echo "(${value} + 1) / 1" | bc
    fi
}

##
# Return screen brightness as a percentage.
##
bright_get_percent()
{
    local value=$(bright_get_value)
    local max=$(bright_get_max)
    local percent=$(echo "scale=4; ${value} / ${max} * 100" | bc)
    bright_value_round "${percent}"
}

##
# Return the current brightness value.
##
bright_get_value()
{
    local file="${BRIGHTNESS_FILE}"
    local line=
    read -r line < "${file}"
    echo "${line}"
}

##
# Return the maximum brightness value.
##
bright_get_max()
{
    local file="${BRIGHTNESS_MAX_FILE}"
    local line=
    read -r line < "${file}"
    echo "${line}"
}

##
# Return the notification icon for the given brightness level.
##
bright_get_notification_icon()
{
	local value="${1}"
	local icon="display-brightness"

	#if [ ${value} -eq 0 ]
	#then
	#	icon="audio-volume-muted"
	#elif [ ${value} -gt 0 -a ${value} -lt 30 ]
	#then
	#	icon="audio-volume-low"
	#elif [ ${value} -ge 30 -a ${value} -lt 60 ]
	#then
	#	icon="audio-volume-medium"
	#elif [ ${value} -ge 60 ]
	#then
	#	icon="audio-volume-high"
	#else
	#	:
	#fi

	echo "${icon}"
}

##
# Check if input is a valid user.
##
bright_is_user()
{
    getent passwd "${1}" &> /dev/null
    if [ $? -eq 0 ]
    then
        return 0
    else
        return 1
    fi
}

##
# Run script.
##
main "${@}"
